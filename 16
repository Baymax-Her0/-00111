Урок №16
Задание №1

class Kassa:
    def __init__(self, initial_amount=0):
        """
        Создает кассу с начальным количеством денег.

        Аргумент:
            initial_amount: Начальное количество денег в кассе (по умолчанию 0).
        """
        self.money = initial_amount

    def top_up(self, amount):
        """
        Пополняет кассу на указанную сумму.

        Аргумент:
            amount: Сумма для пополнения.
        """
        self.money += amount

    def count_1000(self):
        """
        Выводит количество целых тысяч в кассе.
        """
        thousands = self.money // 1000
        print(f"В кассе {thousands} целых тысяч.")

    def take_away(self, amount):
        """
        Забирает указанную сумму из кассы.

        Аргумент:
            amount: Сумма для изъятия.

        Вызывает исключение ValueError, если в кассе недостаточно денег.
        """
        if self.money >= amount:
            self.money -= amount
        else:
            raise ValueError("Недостаточно денег в кассе.")

# Пример использования:
my_kassa = Kassa(1500)  # Создаем кассу с 1500 рублями
my_kassa.top_up(500)    # Пополняем на 500 рублей
my_kassa.count_1000()   # Выводим количество тысяч
try:
    my_kassa.take_away(3000) # Пытаемся забрать 3000 рублей (вызовет ошибку)
except ValueError as e:
    print(e)
my_kassa.take_away(500)    # Забираем 500 рублей
print(f"Остаток в кассе: {my_kassa.money}")

Задание №2

class Turtle:
    def __init__(self, x=0, y=0, s=1):
        """
        Создает черепашку с начальными координатами (x, y) и шагом s.

        Аргументы:
            x: Начальная координата x (по умолчанию 0).
            y: Начальная координата y (по умолчанию 0).
            s: Шаг перемещения (по умолчанию 1).
        """
        self.x = x
        self.y = y
        self.s = s

    def go_up(self):
        """
        Перемещает черепашку вверх (увеличивает y на s).
        """
        self.y += self.s

    def go_down(self):
        """
        Перемещает черепашку вниз (уменьшает y на s).
        """
        self.y -= self.s

    def go_left(self):
        """
        Перемещает черепашку влево (уменьшает x на s).
        """
        self.x -= self.s

    def go_right(self):
        """
        Перемещает черепашку вправо (увеличивает x на s).
        """
        self.x += self.s

    def evolve(self):
        """
        Увеличивает шаг перемещения на 1.
        """
        self.s += 1

    def degrade(self):
        """
        Уменьшает шаг перемещения на 1.
        Вызывает ValueError, если шаг станет меньше или равен 0.
        """
        if self.s > 1: #Уменьшил проверку s > 0 на s > 1, так как по заданию значение s не может быть ≤ 0, а в случае если s=1 то при вызове данного метода s станет = 0
            self.s -= 1
        else:
            raise ValueError("Шаг не может быть меньше или равен 0.")

    def count_moves(self, x2, y2):
        """
        Вычисляет минимальное количество перемещений для достижения координат (x2, y2).

        Аргументы:
            x2: Целевая координата x.
            y2: Целевая координата y.

        Возвращает:
            Минимальное количество перемещений.
        """
        dx = abs(x2 - self.x)
        dy = abs(y2 - self.y)
        moves_x = (dx + self.s - 1) // self.s  # Округление вверх
        moves_y = (dy + self.s - 1) // self.s  # Округление вверх
        return moves_x + moves_y

# Пример использования:
my_turtle = Turtle(0, 0, 2)  # Создаем черепашку в (0, 0) с шагом 2

print(f"Начальные координаты: x={my_turtle.x}, y={my_turtle.y}, шаг={my_turtle.s}")

my_turtle.go_right()
my_turtle.go_up()
print(f"Текущие координаты: x={my_turtle.x}, y={my_turtle.y}")

print(f"Минимальное количество ходов до (5, 5): {my_turtle.count_moves(5, 5)}")

my_turtle.evolve()
print(f"Шаг после evolve: {my_turtle.s}")

try:
    my_turtle.degrade()
    print(f"Шаг после degrade: {my_turtle.s}")
    my_turtle.degrade()
    print(f"Шаг после degrade: {my_turtle.s}")
    my_turtle.degrade()

except ValueError as e:
    print(e)
